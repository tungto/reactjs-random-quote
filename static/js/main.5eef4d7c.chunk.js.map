{"version":3,"sources":["component/Quotes.js","component/Buttons.js","container/QuoteBox.js","App.js","reportWebVitals.js","index.js"],"names":["quotes","props","className","id","text","author","buttons","href","quote","target","rel","onClick","fetchData","QuoteBox","state","error","isLoaded","randomQuote","fetch","then","res","json","result","setState","randomNum","Math","floor","random","this","message","console","log","Quotes","Buttons","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iRAiBeA,EAdA,SAACC,GACd,OACE,eAAC,WAAD,WACE,sBAAKC,UAAU,YAAf,UACE,cAAC,IAAD,IACA,sBAAMC,GAAG,OAAT,SAAiBF,EAAMG,UAEzB,sBAAKF,UAAU,eAAf,cACG,sBAAMC,GAAG,SAAT,SAAmBF,EAAMI,gBCenBC,EAvBC,SAACL,GACf,OACE,sBAAKC,UAAU,UAAf,UACE,oBACEA,UAAU,SACVC,GAAG,cACHI,KAAI,iDAA4CN,EAAMO,MAAlD,oBAA8DP,EAAMI,QACxEI,OAAO,SACPC,IAAI,aALN,UAOE,mBAAGR,UAAU,mBACb,cAAC,IAAD,OAEF,mBAAGA,UAAU,SAASC,GAAG,eAAeI,KAAK,IAA7C,SACE,cAAC,IAAD,MAEF,wBAAQL,UAAU,SAASC,GAAG,YAAYQ,QAASV,EAAMW,UAAzD,2BCuCSC,E,4MArDbC,MAAQ,CACNC,MAAO,KACPC,UAAU,EACVC,YAAa,M,EAMfL,UAAY,WACVM,MACE,0IAECC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MACC,SAACG,GACC,EAAKC,SAAS,CACZP,UAAU,EACVC,YAAaK,EAAOtB,OAAO,EAAKwB,kBAGpC,SAACT,GACC,EAAKQ,SAAS,CAAEP,UAAU,EAAMD,c,EAKxCS,UAAY,WACV,OAAOC,KAAKC,MAAsB,IAAhBD,KAAKE,SAAiB,I,uDAvB1C,WACEC,KAAKhB,c,oBAwBP,WAAU,IAAD,EACkCgB,KAAKd,MAAtCC,EADD,EACCA,MAAOC,EADR,EACQA,SAAUC,EADlB,EACkBA,YAEzB,OAAIF,EACK,2CAAcA,EAAMc,WACjBb,GAGVc,QAAQC,IAAId,EAAYT,OAEtB,sBAAKL,GAAG,YAAR,UACE,cAAC6B,EAAD,CAAQ5B,KAAMa,EAAYT,MAAOH,OAAQY,EAAYZ,SACrD,cAAC4B,EAAD,CACErB,UAAWgB,KAAKhB,UAChBJ,MAAOoB,KAAKd,MAAMG,YAAYT,MAC9BH,OAAQuB,KAAKd,MAAMG,YAAYZ,aAT9B,iD,GArCU6B,a,gBCSRC,MATf,WACE,OACE,sBAAKjC,UAAU,MAAf,UACE,cAAC,IAAD,IACA,cAAC,EAAD,QCISkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5eef4d7c.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\nimport { FaQuoteLeft } from 'react-icons/fa';\r\n\r\nconst quotes = (props) => {\r\n  return (\r\n    <Fragment>\r\n      <div className='quote-tex'>\r\n        <FaQuoteLeft />\r\n        <span id='text'>{props.text}</span>\r\n      </div>\r\n      <div className='quote-author'>\r\n        -<span id='author'>{props.author}</span>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default quotes;\r\n","import React from 'react';\r\nimport { FaTwitter, FaTumblr } from 'react-icons/fa';\r\n\r\nconst buttons = (props) => {\r\n  return (\r\n    <div className='buttons'>\r\n      <a\r\n        className='button'\r\n        id='tweet-quote'\r\n        href={`https://twitter.com/intent/tweet?text=\"${props.quote}\" â€” ${props.author}`}\r\n        target='_blank'\r\n        rel='noreferrer'\r\n      >\r\n        <i className='fab fa-twitter'></i>\r\n        <FaTwitter />\r\n      </a>\r\n      <a className='button' id='tumblr-quote' href='_'>\r\n        <FaTumblr />\r\n      </a>\r\n      <button className='button' id='new-quote' onClick={props.fetchData}>\r\n        New quote\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default buttons;\r\n","import React, { Component } from 'react';\r\nimport Quotes from '../component/Quotes';\r\nimport Buttons from '../component/Buttons';\r\n\r\nclass QuoteBox extends Component {\r\n  state = {\r\n    error: null,\r\n    isLoaded: false,\r\n    randomQuote: null,\r\n  };\r\n  componentDidMount() {\r\n    this.fetchData();\r\n  }\r\n\r\n  fetchData = () => {\r\n    fetch(\r\n      'https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json'\r\n    )\r\n      .then((res) => res.json())\r\n      .then(\r\n        (result) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            randomQuote: result.quotes[this.randomNum()],\r\n          });\r\n        },\r\n        (error) => {\r\n          this.setState({ isLoaded: true, error });\r\n        }\r\n      );\r\n  };\r\n\r\n  randomNum = () => {\r\n    return Math.floor(Math.random() * 102 + 1);\r\n  };\r\n  render() {\r\n    const { error, isLoaded, randomQuote } = this.state;\r\n\r\n    if (error) {\r\n      return <div>Error : {error.message}</div>;\r\n    } else if (!isLoaded) {\r\n      return <div>...Loading</div>;\r\n    } else {\r\n      console.log(randomQuote.quote);\r\n      return (\r\n        <div id='quote-box'>\r\n          <Quotes text={randomQuote.quote} author={randomQuote.author} />\r\n          <Buttons\r\n            fetchData={this.fetchData}\r\n            quote={this.state.randomQuote.quote}\r\n            author={this.state.randomQuote.author}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default QuoteBox;\r\n","import './App.css';\nimport QuoteBox from './container/QuoteBox';\nimport ReactFCCtest from 'react-fcctest';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <ReactFCCtest />\n      <QuoteBox />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}